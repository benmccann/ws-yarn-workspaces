"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fs_1 = require("fs");
function findBinPathCore(options = {}) {
    let { cwd = process.cwd(), stopPath, } = options;
    if (typeof stopPath === 'string') {
        stopPath = [stopPath];
    }
    else if (!Array.isArray(stopPath)) {
        stopPath = [];
    }
    else {
        stopPath = stopPath.slice();
    }
    let bool = true;
    let current = path_1.resolve(cwd);
    let prev;
    let result = [];
    let history = [];
    stopPath = stopPath.map(v => {
        return path_1.resolve(v);
    });
    while (bool) {
        if (prev == current) {
            break;
        }
        let dir = path_1.resolve(current, './node_modules/.bin/');
        history.push(dir);
        let stat;
        try {
            stat = fs_1.statSync(dir);
            if (stat.isDirectory()) {
                result.push(dir);
            }
        }
        catch (e) {
        }
        if (stopPath.length && stopPath.includes(current)) {
            break;
        }
        prev = current;
        current = path_1.resolve(current, '..');
    }
    return {
        result,
        history,
    };
}
exports.findBinPathCore = findBinPathCore;
exports.default = findBinPathCore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrQkFBMEM7QUFDMUMsMkJBQXFDO0FBRXJDLFNBQWdCLGVBQWUsQ0FBQyxVQUc1QixFQUFFO0lBRUwsSUFBSSxFQUNILEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQ25CLFFBQVEsR0FDUixHQUFHLE9BQU8sQ0FBQztJQUVaLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUNoQztRQUNDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RCO1NBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQ2pDO1FBQ0MsUUFBUSxHQUFHLEVBQUUsQ0FBQztLQUNkO1NBRUQ7UUFDQyxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQzVCO0lBRUQsSUFBSSxJQUFJLEdBQVksSUFBSSxDQUFDO0lBRXpCLElBQUksT0FBTyxHQUFXLGNBQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxJQUFJLElBQVksQ0FBQztJQUNqQixJQUFJLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDMUIsSUFBSSxPQUFPLEdBQWEsRUFBRSxDQUFDO0lBRTNCLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzNCLE9BQU8sY0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxJQUFJLEVBQ1g7UUFDQyxJQUFJLElBQUksSUFBSSxPQUFPLEVBQ25CO1lBQ0MsTUFBTTtTQUNOO1FBRUQsSUFBSSxHQUFHLEdBQUcsY0FBTyxDQUFDLE9BQU8sRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbEIsSUFBSSxJQUFXLENBQUM7UUFFaEIsSUFDQTtZQUNDLElBQUksR0FBRyxhQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQ3RCO2dCQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDakI7U0FDRDtRQUNELE9BQU8sQ0FBQyxFQUNSO1NBRUM7UUFFRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFDakQ7WUFDQyxNQUFNO1NBQ047UUFFRCxJQUFJLEdBQUcsT0FBTyxDQUFDO1FBQ2YsT0FBTyxHQUFHLGNBQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFFRCxPQUFPO1FBQ04sTUFBTTtRQUNOLE9BQU87S0FDUCxDQUFBO0FBQ0YsQ0FBQztBQXhFRCwwQ0F3RUM7QUFFRCxrQkFBZSxlQUFlLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGF0aEtleSBmcm9tICdwYXRoLWtleSc7XG5pbXBvcnQgeyByZXNvbHZlLCBkZWxpbWl0ZXIgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgU3RhdHMsIHN0YXRTeW5jIH0gZnJvbSBcImZzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQmluUGF0aENvcmUob3B0aW9uczoge1xuXHRjd2Q/OiBzdHJpbmcsXG5cdHN0b3BQYXRoPzogc3RyaW5nIHwgc3RyaW5nW11cbn0gPSB7fSlcbntcblx0bGV0IHtcblx0XHRjd2QgPSBwcm9jZXNzLmN3ZCgpLFxuXHRcdHN0b3BQYXRoLFxuXHR9ID0gb3B0aW9ucztcblxuXHRpZiAodHlwZW9mIHN0b3BQYXRoID09PSAnc3RyaW5nJylcblx0e1xuXHRcdHN0b3BQYXRoID0gW3N0b3BQYXRoXTtcblx0fVxuXHRlbHNlIGlmICghQXJyYXkuaXNBcnJheShzdG9wUGF0aCkpXG5cdHtcblx0XHRzdG9wUGF0aCA9IFtdO1xuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdHN0b3BQYXRoID0gc3RvcFBhdGguc2xpY2UoKTtcblx0fVxuXG5cdGxldCBib29sOiBib29sZWFuID0gdHJ1ZTtcblxuXHRsZXQgY3VycmVudDogc3RyaW5nID0gcmVzb2x2ZShjd2QpO1xuXHRsZXQgcHJldjogc3RyaW5nO1xuXHRsZXQgcmVzdWx0OiBzdHJpbmdbXSA9IFtdO1xuXHRsZXQgaGlzdG9yeTogc3RyaW5nW10gPSBbXTtcblxuXHRzdG9wUGF0aCA9IHN0b3BQYXRoLm1hcCh2ID0+IHtcblx0XHRyZXR1cm4gcmVzb2x2ZSh2KVxuXHR9KTtcblxuXHR3aGlsZSAoYm9vbClcblx0e1xuXHRcdGlmIChwcmV2ID09IGN1cnJlbnQpXG5cdFx0e1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0bGV0IGRpciA9IHJlc29sdmUoY3VycmVudCwgJy4vbm9kZV9tb2R1bGVzLy5iaW4vJyk7XG5cdFx0aGlzdG9yeS5wdXNoKGRpcik7XG5cblx0XHRsZXQgc3RhdDogU3RhdHM7XG5cblx0XHR0cnlcblx0XHR7XG5cdFx0XHRzdGF0ID0gc3RhdFN5bmMoZGlyKTtcblx0XHRcdGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpXG5cdFx0XHR7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKGRpcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNhdGNoIChlKVxuXHRcdHtcblxuXHRcdH1cblxuXHRcdGlmIChzdG9wUGF0aC5sZW5ndGggJiYgc3RvcFBhdGguaW5jbHVkZXMoY3VycmVudCkpXG5cdFx0e1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IHJlc29sdmUoY3VycmVudCwgJy4uJyk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJlc3VsdCxcblx0XHRoaXN0b3J5LFxuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZpbmRCaW5QYXRoQ29yZVxuIl19