"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const _defaultCopyStaticFiles = [
    ['.npmignore', 'file/npmignore'],
    ['.gitignore', 'file/gitignore'],
    ['.eslintignore', 'file/eslintignore'],
    ['.nvmrc', 'file/nvmrc'],
    ['.browserslistrc', 'file/browserslistrc'],
    ['tsconfig.json.tpl', 'file/tsconfig.json.tpl', 'tsconfig.json'],
    ['tsconfig.esm.json.tpl', 'file/tsconfig.esm.json.tpl', 'tsconfig.esm.json'],
    ['.eslintrc.json.tpl', 'file/eslintrc.json.tpl', '.eslintrc.json'],
    ['README.md', 'file/README.md'],
    ['.nycrc', 'file/nycrc'],
    ['.mocharc.yml', 'file/mocharc.yml'],
    ['jest.config.js', 'file/jest.config.js'],
];
exports.defaultCopyStaticFiles = Object.freeze(_defaultCopyStaticFiles);
function parseStaticMap(file_map) {
    let ls;
    if (Array.isArray(file_map)) {
        // @ts-ignore
        ls = Object.values(file_map);
    }
    else {
        // @ts-ignore
        ls = Object.entries(file_map);
    }
    return ls
        .filter(v => v && Array.isArray(v) && v.length > 1);
}
exports.parseStaticMap = parseStaticMap;
function getStaticFile(file_id, options) {
    let ls = parseStaticMap(options && options.file_map || exports.defaultCopyStaticFiles);
    return ls.find(([a]) => {
        return a === file_id;
    });
}
exports.getStaticFile = getStaticFile;
function copyStaticFiles(options) {
    if (!options.cwd || typeof options.cwd != 'string') {
        throw new TypeError(`options.cwd must is string`);
    }
    if (!fs_extra_1.pathExistsSync(options.cwd)) {
        throw new TypeError(`options.cwd not exists`);
    }
    let copyOptions = {
        overwrite: options.overwrite || false,
        preserveTimestamps: true,
        errorOnExist: false,
    };
    const { cwd, file_map = exports.defaultCopyStaticFiles } = options;
    const staticRoot = options.staticRoot || __dirname;
    let ls = parseStaticMap(file_map);
    ls = ls.filter(v => v && Array.isArray(v) && v.length > 1);
    if (!ls.length) {
        throw new TypeError(`file_map is not file map`);
    }
    return ls
        // @ts-ignore
        .filter(function ([a, b, c]) {
        let fa = path_1.resolve(cwd, a);
        let fb = path_1.resolve(staticRoot, b);
        if (c != null) {
            let fc = path_1.resolve(cwd, c);
            if (fs_extra_1.existsSync(fc)) {
                return;
            }
        }
        if (!fs_extra_1.existsSync(fb)) {
            throw new Error(`file not exists. ${fb}`);
        }
        fs_extra_1.copySync(fb, fa, copyOptions);
        return true;
    });
}
exports.copyStaticFiles = copyStaticFiles;
exports.default = copyStaticFiles;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFpRjtBQUNqRiwrQkFBK0I7QUFFL0IsTUFBTSx1QkFBdUIsR0FBRztJQUUvQixDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQztJQUNoQyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQztJQUVoQyxDQUFDLGVBQWUsRUFBRSxtQkFBbUIsQ0FBQztJQUV0QyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7SUFDeEIsQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsQ0FBQztJQUUxQyxDQUFDLG1CQUFtQixFQUFFLHdCQUF3QixFQUFFLGVBQWUsQ0FBQztJQUNoRSxDQUFDLHVCQUF1QixFQUFFLDRCQUE0QixFQUFFLG1CQUFtQixDQUFDO0lBRTVFLENBQUMsb0JBQW9CLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWdCLENBQUM7SUFFbEUsQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLENBQUM7SUFFL0IsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDO0lBRXhCLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDO0lBQ3BDLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCLENBQUM7Q0FFaEMsQ0FBQztBQTBCRSxRQUFBLHNCQUFzQixHQUF5QyxNQUFNLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFRLENBQUM7QUFpQjFILFNBQWdCLGNBQWMsQ0FBbUIsUUFBeUI7SUFFekUsSUFBSSxFQUF3QixDQUFDO0lBRTdCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFDM0I7UUFDQyxhQUFhO1FBQ2IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDNUI7U0FFRDtRQUNDLGFBQWE7UUFDYixFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtLQUM3QjtJQUVELE9BQU8sRUFBRTtTQUNQLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQ2xEO0FBQ0gsQ0FBQztBQWxCRCx3Q0FrQkM7QUFFRCxTQUFnQixhQUFhLENBQW1CLE9BQVUsRUFBRSxPQUEyRDtJQUV0SCxJQUFJLEVBQUUsR0FBRyxjQUFjLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksOEJBQWlELENBQUMsQ0FBQztJQUUxRyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDdEIsT0FBTyxDQUFDLEtBQUssT0FBTyxDQUFDO0lBQ3RCLENBQUMsQ0FBeUIsQ0FBQTtBQUMzQixDQUFDO0FBUEQsc0NBT0M7QUFFRCxTQUFnQixlQUFlLENBQW1CLE9BQW1DO0lBRXBGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLE9BQU8sT0FBTyxDQUFDLEdBQUcsSUFBSSxRQUFRLEVBQ2xEO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO0tBQ2pEO0lBRUQsSUFBSSxDQUFDLHlCQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUNoQztRQUNDLE1BQU0sSUFBSSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtLQUM3QztJQUVELElBQUksV0FBVyxHQUFvQjtRQUNsQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsSUFBSSxLQUFLO1FBQ3JDLGtCQUFrQixFQUFFLElBQUk7UUFDeEIsWUFBWSxFQUFFLEtBQUs7S0FDbkIsQ0FBQztJQUVGLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxHQUFHLDhCQUFpRCxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQ3RGLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDO0lBRW5ELElBQUksRUFBRSxHQUFHLGNBQWMsQ0FBSSxRQUFRLENBQUMsQ0FBQztJQUVyQyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFM0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQ2Q7UUFDQyxNQUFNLElBQUksU0FBUyxDQUFDLDBCQUEwQixDQUFDLENBQUE7S0FDL0M7SUFFRCxPQUFPLEVBQUU7UUFDUixhQUFhO1NBQ1osTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBcUI7UUFFOUMsSUFBSSxFQUFFLEdBQUcsY0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLEVBQUUsR0FBRyxjQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWhDLElBQUksQ0FBQyxJQUFJLElBQUksRUFDYjtZQUNDLElBQUksRUFBRSxHQUFHLGNBQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFekIsSUFBSSxxQkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNsQjtnQkFDQyxPQUFPO2FBQ1A7U0FDRDtRQUVELElBQUksQ0FBQyxxQkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUNuQjtZQUNDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDekM7UUFFRCxtQkFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFOUIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDLENBQUMsQ0FDRjtBQUNGLENBQUM7QUF6REQsMENBeURDO0FBRUQsa0JBQWUsZUFBZSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhpc3RzU3luYywgY29weVN5bmMsIENvcHlPcHRpb25zU3luYywgcGF0aEV4aXN0c1N5bmMgfSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyByZXNvbHZlIH0gZnJvbSAncGF0aCc7XG5cbmNvbnN0IF9kZWZhdWx0Q29weVN0YXRpY0ZpbGVzID0gW1xuXG5cdFsnLm5wbWlnbm9yZScsICdmaWxlL25wbWlnbm9yZSddLFxuXHRbJy5naXRpZ25vcmUnLCAnZmlsZS9naXRpZ25vcmUnXSxcblxuXHRbJy5lc2xpbnRpZ25vcmUnLCAnZmlsZS9lc2xpbnRpZ25vcmUnXSxcblxuXHRbJy5udm1yYycsICdmaWxlL252bXJjJ10sXG5cdFsnLmJyb3dzZXJzbGlzdHJjJywgJ2ZpbGUvYnJvd3NlcnNsaXN0cmMnXSxcblxuXHRbJ3RzY29uZmlnLmpzb24udHBsJywgJ2ZpbGUvdHNjb25maWcuanNvbi50cGwnLCAndHNjb25maWcuanNvbiddLFxuXHRbJ3RzY29uZmlnLmVzbS5qc29uLnRwbCcsICdmaWxlL3RzY29uZmlnLmVzbS5qc29uLnRwbCcsICd0c2NvbmZpZy5lc20uanNvbiddLFxuXG5cdFsnLmVzbGludHJjLmpzb24udHBsJywgJ2ZpbGUvZXNsaW50cmMuanNvbi50cGwnLCAnLmVzbGludHJjLmpzb24nXSxcblxuXHRbJ1JFQURNRS5tZCcsICdmaWxlL1JFQURNRS5tZCddLFxuXG5cdFsnLm55Y3JjJywgJ2ZpbGUvbnljcmMnXSxcblxuXHRbJy5tb2NoYXJjLnltbCcsICdmaWxlL21vY2hhcmMueW1sJ10sXG5cdFsnamVzdC5jb25maWcuanMnLCAnZmlsZS9qZXN0LmNvbmZpZy5qcyddLFxuXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBJU3RhdGljRmlsZXNJRDxUID0gdHlwZW9mIF9kZWZhdWx0Q29weVN0YXRpY0ZpbGVzPiA9XG5cdFQgZXh0ZW5kcyAoe1xuXHRcdFtuOiBudW1iZXJdOiBbaW5mZXIgVSwgc3RyaW5nLCBzdHJpbmc/XSB8IHJlYWRvbmx5IFtpbmZlciBVLCBzdHJpbmcsIHN0cmluZz9dO1xuXHR9IHwge1xuXHRcdHJlYWRvbmx5IFtuOiBudW1iZXJdOiBbaW5mZXIgVSwgc3RyaW5nLCBzdHJpbmc/XSB8IHJlYWRvbmx5IFtpbmZlciBVLCBzdHJpbmcsIHN0cmluZz9dO1xuXHR9KVxuXHQ/IFVcblx0OiBuZXZlclxuXHQ7XG5cbmV4cG9ydCB0eXBlIElTdGF0aWNGaWxlc1JvdzxLIGV4dGVuZHMgc3RyaW5nPiA9IFtLLCBzdHJpbmcsIHN0cmluZz9dXG5cbnR5cGUgSVN0YXRpY0ZpbGVzTWFwMDE8SyBleHRlbmRzIHN0cmluZz4gPSB7XG5cdFtQIGluIEtdOiBJU3RhdGljRmlsZXNSb3c8UD5cbn1cblxuZXhwb3J0IHR5cGUgSVN0YXRpY0ZpbGVzTWFwUmVjb3JkPEsgZXh0ZW5kcyBzdHJpbmc+ID0ge1xuXHRbUCBpbiBLXTogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIElTdGF0aWNGaWxlc01hcEFycmF5PEsgZXh0ZW5kcyBzdHJpbmc+ID0gSVN0YXRpY0ZpbGVzTWFwMDE8Sz5bS11bXVxuXG5leHBvcnQgdHlwZSBJU3RhdGljRmlsZXM8SyBleHRlbmRzIHN0cmluZz4gPSBJU3RhdGljRmlsZXNNYXBBcnJheTxLPiB8IElTdGF0aWNGaWxlc01hcFJlY29yZDxLPlxuXG5leHBvcnQgY29uc3QgZGVmYXVsdENvcHlTdGF0aWNGaWxlczogSVN0YXRpY0ZpbGVzTWFwQXJyYXk8SVN0YXRpY0ZpbGVzSUQ+ID0gT2JqZWN0LmZyZWV6ZShfZGVmYXVsdENvcHlTdGF0aWNGaWxlcykgYXMgYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIElDb3B5U3RhdGljRmlsZXNPcHRpb25zQmFzZTxLIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPlxue1xuXHRjd2Q6IHN0cmluZyxcblx0c3RhdGljUm9vdD86IHN0cmluZyxcblx0b3ZlcndyaXRlPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29weVN0YXRpY0ZpbGVzT3B0aW9uczxLIGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiBleHRlbmRzIElDb3B5U3RhdGljRmlsZXNPcHRpb25zQmFzZTxLPlxue1xuXHRmaWxlX21hcD86IElTdGF0aWNGaWxlczxLPixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3RhdGljTWFwPEsgZXh0ZW5kcyBzdHJpbmc+KGZpbGVfbWFwOiBJU3RhdGljRmlsZXNNYXBSZWNvcmQ8Sz4pOiBbSyB8IElTdGF0aWNGaWxlc0lELCBzdHJpbmcsIHN0cmluZz9dW11cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0YXRpY01hcDxLIGV4dGVuZHMgc3RyaW5nPihmaWxlX21hcDogSVN0YXRpY0ZpbGVzTWFwQXJyYXk8Sz4pOiBbSyB8IElTdGF0aWNGaWxlc0lELCBzdHJpbmcsIHN0cmluZz9dW11cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0YXRpY01hcDxLIGV4dGVuZHMgc3RyaW5nPihmaWxlX21hcDogSVN0YXRpY0ZpbGVzPEs+KTogW0sgfCBJU3RhdGljRmlsZXNJRCwgc3RyaW5nLCBzdHJpbmc/XVtdXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdGF0aWNNYXA8SyBleHRlbmRzIHN0cmluZz4oZmlsZV9tYXA6IElTdGF0aWNGaWxlczxLPik6IFtLLCBzdHJpbmcsIHN0cmluZz9dW11cbntcblx0bGV0IGxzOiBJU3RhdGljRmlsZXNSb3c8Sz5bXTtcblxuXHRpZiAoQXJyYXkuaXNBcnJheShmaWxlX21hcCkpXG5cdHtcblx0XHQvLyBAdHMtaWdub3JlXG5cdFx0bHMgPSBPYmplY3QudmFsdWVzKGZpbGVfbWFwKVxuXHR9XG5cdGVsc2Vcblx0e1xuXHRcdC8vIEB0cy1pZ25vcmVcblx0XHRscyA9IE9iamVjdC5lbnRyaWVzKGZpbGVfbWFwKVxuXHR9XG5cblx0cmV0dXJuIGxzXG5cdFx0LmZpbHRlcih2ID0+IHYgJiYgQXJyYXkuaXNBcnJheSh2KSAmJiB2Lmxlbmd0aCA+IDEpXG5cdFx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGljRmlsZTxLIGV4dGVuZHMgc3RyaW5nPihmaWxlX2lkOiBLLCBvcHRpb25zPzogUGljazxJQ29weVN0YXRpY0ZpbGVzT3B0aW9uczxzdHJpbmc+LCAnZmlsZV9tYXAnPik6IFtLLCBzdHJpbmcsIHN0cmluZz9dXG57XG5cdGxldCBscyA9IHBhcnNlU3RhdGljTWFwKG9wdGlvbnMgJiYgb3B0aW9ucy5maWxlX21hcCB8fCBkZWZhdWx0Q29weVN0YXRpY0ZpbGVzIGFzIElTdGF0aWNGaWxlc01hcEFycmF5PEs+KTtcblxuXHRyZXR1cm4gbHMuZmluZCgoW2FdKSA9PiB7XG5cdFx0cmV0dXJuIGEgPT09IGZpbGVfaWQ7XG5cdH0pIGFzIFtLLCBzdHJpbmcsIHN0cmluZz9dXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5U3RhdGljRmlsZXM8SyBleHRlbmRzIHN0cmluZz4ob3B0aW9uczogSUNvcHlTdGF0aWNGaWxlc09wdGlvbnM8Sz4pXG57XG5cdGlmICghb3B0aW9ucy5jd2QgfHwgdHlwZW9mIG9wdGlvbnMuY3dkICE9ICdzdHJpbmcnKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgb3B0aW9ucy5jd2QgbXVzdCBpcyBzdHJpbmdgKVxuXHR9XG5cblx0aWYgKCFwYXRoRXhpc3RzU3luYyhvcHRpb25zLmN3ZCkpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBvcHRpb25zLmN3ZCBub3QgZXhpc3RzYClcblx0fVxuXG5cdGxldCBjb3B5T3B0aW9uczogQ29weU9wdGlvbnNTeW5jID0ge1xuXHRcdG92ZXJ3cml0ZTogb3B0aW9ucy5vdmVyd3JpdGUgfHwgZmFsc2UsXG5cdFx0cHJlc2VydmVUaW1lc3RhbXBzOiB0cnVlLFxuXHRcdGVycm9yT25FeGlzdDogZmFsc2UsXG5cdH07XG5cblx0Y29uc3QgeyBjd2QsIGZpbGVfbWFwID0gZGVmYXVsdENvcHlTdGF0aWNGaWxlcyBhcyBJU3RhdGljRmlsZXNNYXBBcnJheTxLPiB9ID0gb3B0aW9ucztcblx0Y29uc3Qgc3RhdGljUm9vdCA9IG9wdGlvbnMuc3RhdGljUm9vdCB8fCBfX2Rpcm5hbWU7XG5cblx0bGV0IGxzID0gcGFyc2VTdGF0aWNNYXA8Sz4oZmlsZV9tYXApO1xuXG5cdGxzID0gbHMuZmlsdGVyKHYgPT4gdiAmJiBBcnJheS5pc0FycmF5KHYpICYmIHYubGVuZ3RoID4gMSk7XG5cblx0aWYgKCFscy5sZW5ndGgpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBmaWxlX21hcCBpcyBub3QgZmlsZSBtYXBgKVxuXHR9XG5cblx0cmV0dXJuIGxzXG5cdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdC5maWx0ZXIoZnVuY3Rpb24gKFthLCBiLCBjXTogSVN0YXRpY0ZpbGVzUm93PEs+KVxuXHRcdHtcblx0XHRcdGxldCBmYSA9IHJlc29sdmUoY3dkLCBhKTtcblx0XHRcdGxldCBmYiA9IHJlc29sdmUoc3RhdGljUm9vdCwgYik7XG5cblx0XHRcdGlmIChjICE9IG51bGwpXG5cdFx0XHR7XG5cdFx0XHRcdGxldCBmYyA9IHJlc29sdmUoY3dkLCBjKTtcblxuXHRcdFx0XHRpZiAoZXhpc3RzU3luYyhmYykpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFleGlzdHNTeW5jKGZiKSlcblx0XHRcdHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBmaWxlIG5vdCBleGlzdHMuICR7ZmJ9YClcblx0XHRcdH1cblxuXHRcdFx0Y29weVN5bmMoZmIsIGZhLCBjb3B5T3B0aW9ucyk7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pXG5cdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weVN0YXRpY0ZpbGVzXG4iXX0=