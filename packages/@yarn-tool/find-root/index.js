"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const upath2_1 = require("upath2");
exports.pathNormalize = upath2_1.normalize;
const core_1 = require("find-yarn-workspace-root2/core");
const pkg_dir_1 = require("pkg-dir");
function findRoot(options, _throwError) {
    if (!options.cwd) {
        throw new TypeError(`options.cwd is '${options.cwd}'`);
    }
    let ws;
    if (!options.skipCheckWorkspace) {
        ws = core_1.findWorkspaceRoot(options.cwd);
    }
    let pkg = pkg_dir_1.sync(options.cwd);
    let { throwError = _throwError } = options;
    if (pkg == null && throwError) {
        let err = new TypeError(`can't found package root from target directory '${options.cwd}'`);
        throw err;
    }
    let hasWorkspace = ws && ws != null;
    let isWorkspace = hasWorkspace && pathEqual(ws, pkg);
    let root = hasWorkspace ? ws : pkg;
    return {
        pkg,
        ws,
        hasWorkspace,
        isWorkspace,
        root,
    };
}
exports.findRoot = findRoot;
function pathEqual(a, b) {
    return upath2_1.normalize(a) === upath2_1.normalize(b);
}
exports.pathEqual = pathEqual;
function listMatchedPatternByPath(ws, pkg) {
    const manifest = core_1.readPackageJSON(ws);
    if (!manifest || !manifest.workspaces) {
        throw new Error(`not a package.json of yarn workspaces`);
    }
    const workspaces = core_1.extractWorkspaces(manifest);
    const relativePath = upath2_1.relative(ws, pkg);
    if (relativePath == '') {
        throw new RangeError(`pkg should not same as ws`);
    }
    const { ignores, list } = workspaces.reduce((a, b) => {
        if (b.startsWith('!')) {
            a.ignores.push(b);
        }
        else {
            a.list.push(b);
        }
        return a;
    }, {
        ignores: [],
        list: [],
    });
    return list
        .reduce(function (a, b) {
        if (core_1.isMatchWorkspaces(relativePath, [
            b,
            ...ignores,
        ])) {
            a.push(b);
        }
        return a;
    }, []);
}
exports.listMatchedPatternByPath = listMatchedPatternByPath;
exports.default = findRoot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUE4RDtBQStDckQsd0JBL0N1QixrQkFBYSxDQStDdkI7QUE5Q3RCLHlEQUFtSjtBQUduSixxQ0FBeUM7QUFFekMsU0FBZ0IsUUFBUSxDQUFDLE9BSXhCLEVBQUUsV0FBcUI7SUFFdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ2hCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7S0FDdEQ7SUFFRCxJQUFJLEVBQVUsQ0FBQztJQUVmLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQy9CO1FBQ0MsRUFBRSxHQUFHLHdCQUFxQixDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QztJQUVELElBQUksR0FBRyxHQUFHLGNBQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFOUIsSUFBSSxFQUFFLFVBQVUsR0FBRyxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFM0MsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLFVBQVUsRUFDN0I7UUFDQyxJQUFJLEdBQUcsR0FBRyxJQUFJLFNBQVMsQ0FBQyxtREFBbUQsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0YsTUFBTSxHQUFHLENBQUM7S0FDVjtJQUVELElBQUksWUFBWSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDO0lBQ3BDLElBQUksV0FBVyxHQUFHLFlBQVksSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JELElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFFbkMsT0FBTztRQUNOLEdBQUc7UUFDSCxFQUFFO1FBQ0YsWUFBWTtRQUNaLFdBQVc7UUFDWCxJQUFJO0tBQ0osQ0FBQTtBQUNGLENBQUM7QUF2Q0QsNEJBdUNDO0FBSUQsU0FBZ0IsU0FBUyxDQUFDLENBQVMsRUFBRSxDQUFTO0lBRTdDLE9BQU8sa0JBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxrQkFBYSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzdDLENBQUM7QUFIRCw4QkFHQztBQUVELFNBQWdCLHdCQUF3QixDQUFDLEVBQVUsRUFBRSxHQUFXO0lBRS9ELE1BQU0sUUFBUSxHQUFHLHNCQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFckMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQ3JDO1FBQ0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFBO0tBQ3hEO0lBRUQsTUFBTSxVQUFVLEdBQUcsd0JBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFL0MsTUFBTSxZQUFZLEdBQUcsaUJBQVEsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFdkMsSUFBSSxZQUFZLElBQUksRUFBRSxFQUN0QjtRQUNDLE1BQU0sSUFBSSxVQUFVLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtLQUNqRDtJQUVELE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUVwRCxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQ3JCO1lBQ0MsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7YUFFRDtZQUNDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRTtRQUNGLE9BQU8sRUFBRSxFQUFjO1FBQ3ZCLElBQUksRUFBRSxFQUFjO0tBQ3BCLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSTtTQUNULE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1FBRXJCLElBQUksd0JBQWlCLENBQUMsWUFBWSxFQUFFO1lBQ25DLENBQUM7WUFDRCxHQUFHLE9BQU87U0FDVixDQUFDLEVBQ0Y7WUFDQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ1Q7UUFFRCxPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRSxFQUFjLENBQUMsQ0FDbEI7QUFDRixDQUFDO0FBakRELDREQWlEQztBQUVELGtCQUFlLFFBQVEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbGF0aXZlLCBub3JtYWxpemUgYXMgcGF0aE5vcm1hbGl6ZSB9IGZyb20gJ3VwYXRoMic7XG5pbXBvcnQgeyBleHRyYWN0V29ya3NwYWNlcywgaXNNYXRjaFdvcmtzcGFjZXMsIHJlYWRQYWNrYWdlSlNPTiwgZmluZFdvcmtzcGFjZVJvb3QgYXMgZmluZFlhcm5Xb3Jrc3BhY2VSb290IH0gZnJvbSAnZmluZC15YXJuLXdvcmtzcGFjZS1yb290Mi9jb3JlJztcbmltcG9ydCB7IHJlYWRQYWNrYWdlSnNvbiB9IGZyb20gJ0B0cy10eXBlL3BhY2thZ2UtZHRzJztcblxuaW1wb3J0IHsgc3luYyBhcyBwa2dEaXIgfSBmcm9tICdwa2ctZGlyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRSb290KG9wdGlvbnM6IHtcblx0Y3dkOiBzdHJpbmcsXG5cdHNraXBDaGVja1dvcmtzcGFjZT86IGJvb2xlYW4gfCBzdHJpbmcsXG5cdHRocm93RXJyb3I/OiBib29sZWFuLFxufSwgX3Rocm93RXJyb3I/OiBib29sZWFuKVxue1xuXHRpZiAoIW9wdGlvbnMuY3dkKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgb3B0aW9ucy5jd2QgaXMgJyR7b3B0aW9ucy5jd2R9J2ApXG5cdH1cblxuXHRsZXQgd3M6IHN0cmluZztcblxuXHRpZiAoIW9wdGlvbnMuc2tpcENoZWNrV29ya3NwYWNlKVxuXHR7XG5cdFx0d3MgPSBmaW5kWWFybldvcmtzcGFjZVJvb3Qob3B0aW9ucy5jd2QpO1xuXHR9XG5cblx0bGV0IHBrZyA9IHBrZ0RpcihvcHRpb25zLmN3ZCk7XG5cblx0bGV0IHsgdGhyb3dFcnJvciA9IF90aHJvd0Vycm9yIH0gPSBvcHRpb25zO1xuXG5cdGlmIChwa2cgPT0gbnVsbCAmJiB0aHJvd0Vycm9yKVxuXHR7XG5cdFx0bGV0IGVyciA9IG5ldyBUeXBlRXJyb3IoYGNhbid0IGZvdW5kIHBhY2thZ2Ugcm9vdCBmcm9tIHRhcmdldCBkaXJlY3RvcnkgJyR7b3B0aW9ucy5jd2R9J2ApO1xuXHRcdHRocm93IGVycjtcblx0fVxuXG5cdGxldCBoYXNXb3Jrc3BhY2UgPSB3cyAmJiB3cyAhPSBudWxsO1xuXHRsZXQgaXNXb3Jrc3BhY2UgPSBoYXNXb3Jrc3BhY2UgJiYgcGF0aEVxdWFsKHdzLCBwa2cpO1xuXHRsZXQgcm9vdCA9IGhhc1dvcmtzcGFjZSA/IHdzIDogcGtnO1xuXG5cdHJldHVybiB7XG5cdFx0cGtnLFxuXHRcdHdzLFxuXHRcdGhhc1dvcmtzcGFjZSxcblx0XHRpc1dvcmtzcGFjZSxcblx0XHRyb290LFxuXHR9XG59XG5cbmV4cG9ydCB7IHBhdGhOb3JtYWxpemUgfVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0aEVxdWFsKGE6IHN0cmluZywgYjogc3RyaW5nKVxue1xuXHRyZXR1cm4gcGF0aE5vcm1hbGl6ZShhKSA9PT0gcGF0aE5vcm1hbGl6ZShiKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdE1hdGNoZWRQYXR0ZXJuQnlQYXRoKHdzOiBzdHJpbmcsIHBrZzogc3RyaW5nKVxue1xuXHRjb25zdCBtYW5pZmVzdCA9IHJlYWRQYWNrYWdlSlNPTih3cyk7XG5cblx0aWYgKCFtYW5pZmVzdCB8fCAhbWFuaWZlc3Qud29ya3NwYWNlcylcblx0e1xuXHRcdHRocm93IG5ldyBFcnJvcihgbm90IGEgcGFja2FnZS5qc29uIG9mIHlhcm4gd29ya3NwYWNlc2ApXG5cdH1cblxuXHRjb25zdCB3b3Jrc3BhY2VzID0gZXh0cmFjdFdvcmtzcGFjZXMobWFuaWZlc3QpO1xuXG5cdGNvbnN0IHJlbGF0aXZlUGF0aCA9IHJlbGF0aXZlKHdzLCBwa2cpO1xuXG5cdGlmIChyZWxhdGl2ZVBhdGggPT0gJycpXG5cdHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihgcGtnIHNob3VsZCBub3Qgc2FtZSBhcyB3c2ApXG5cdH1cblxuXHRjb25zdCB7IGlnbm9yZXMsIGxpc3QgfSA9IHdvcmtzcGFjZXMucmVkdWNlKChhLCBiKSA9PiB7XG5cblx0XHRpZiAoYi5zdGFydHNXaXRoKCchJykpXG5cdFx0e1xuXHRcdFx0YS5pZ25vcmVzLnB1c2goYik7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRhLmxpc3QucHVzaChiKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYTtcblx0fSwge1xuXHRcdGlnbm9yZXM6IFtdIGFzIHN0cmluZ1tdLFxuXHRcdGxpc3Q6IFtdIGFzIHN0cmluZ1tdLFxuXHR9KTtcblxuXHRyZXR1cm4gbGlzdFxuXHRcdC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpXG5cdFx0e1xuXHRcdFx0aWYgKGlzTWF0Y2hXb3Jrc3BhY2VzKHJlbGF0aXZlUGF0aCwgW1xuXHRcdFx0XHRiLFxuXHRcdFx0XHQuLi5pZ25vcmVzLFxuXHRcdFx0XSkpXG5cdFx0XHR7XG5cdFx0XHRcdGEucHVzaChiKVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9LCBbXSBhcyBzdHJpbmdbXSlcblx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmaW5kUm9vdFxuIl19